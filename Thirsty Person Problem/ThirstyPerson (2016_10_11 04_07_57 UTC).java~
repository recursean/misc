import java.util.Arrays;
import java.util.Random;

public class ThirstyPerson{
    public static String itemName(int item){
	if(item == 0)
	    return "water";
	else if(item == 1)
	    return "ice";
	else if(item == 2)
	    return "glass";
	else
	    return "empty";
    }
    public static class Monitor{
	private int in = 0, sz = 3, out = 0, count = 0;
	private int[] buffer = new int[sz];

	public Monitor(){
	    for(int i = 0; i < sz; i++)
		buffer[i] = -1;
	}

	public Monitor(int s){
	    sz = s;
	    buffer = new int[sz];
	    for(int i = 0; i < sz; i ++)
		buffer[i] = -1;
	}

	public boolean needsItems(int item){
	    if(item == 0){
		if((buffer[0] == 1 && buffer[1] == 2) || (buffer[0] == 2 && buffer[1] == 1))
		    return true;
		else
		    return false;
	    }
	    else if(item == 1){
		if((buffer[0] == 0 && buffer[1] == 2) || (buffer[0] == 2 && buffer[1] == 0))
		    return true;
		else
		    return false;
	    }
	    else if(item == 2){
		if((buffer[0] == 0 && buffer[1] == 1) || (buffer[0] == 1 && buffer[1] == 0))
		    return true;
		else
		    return false;
	    }
	    else
		return false;
	}

	private void add(int item){
	    buffer[in] = item;
	    in = (in + 1) % buffer.length;
	    System.out.println(Thread.currentThread().getName() + " adds " + itemName(item) + ": [" + itemName(buffer[0]) + ", " + itemName(buffer[1]) + "]");
	}

	private int remove(){
	    int item = buffer[out];
	    buffer[out] = -1;
	    out = (out + 1) % buffer.length;
	    System.out.println(Thread.currentThread().getName() + " gets " + itemName(item) + ": [" + itemName(buffer[0]) + ", " + itemName(buffer[1]) + "]");
	    return item;
	}

	private synchronized void addToBuffer(int item){
	    System.out.println(Thread.currentThread().getName() + " enters with " + itemName(item));
	    while(count == buffer.length)
		try{
		    System.out.println(Thread.currentThread().getName() + " goes to sleep");
		    wait();
		}
		catch(InterruptedException ie){
		}
	    add(item);
	    count++;
	    if(count == 2){
		notifyAll();
		try{
		    System.out.println(Thread.currentThread().getName() + " leaves the table");
		    wait();
		}
		catch(InterruptedException ie){
		}
	    }
	}

	public synchronized int removeFromBuffer(){
	    System.out.println(Thread.currentThread().getName() + " enters");
	    while(!needsItems(((Drinker)Thread.currentThread()).startingItem)){  //change this
		if(((Drinker)Thread.currentThread()).allow == true){
		    break;
		}
		try{
		    System.out.println(Thread.currentThread().getName() + " is thirsty and waiting");
		    wait();
		}
		catch(InterruptedException ie){
		}
	    }                                               //////////////
	    int item = remove();
	    if(count ==  buffer.length){
		((Drinker)Thread.currentThread()).allow = true;
	    }
	    //count--;
	    else if(((Drinker)Thread.currentThread()).allow == true){
		((Drinker)Thread.currentThread()).allow = false;
	    }
	    count--;
	    if(count == 0)
	   	notifyAll();
	    return item;
	}
    }

    public static class Server extends Thread{
	private  Monitor producerConsumer;
	int itemOnTable = -1, items = 0;
	public Server(int i, Monitor pc){
	    super("Server" + i);
	    producerConsumer = pc;
	}
	
	private int produce(){
	    if(items % 2 == 0)
		itemOnTable = -1;
	    int item = (new Random()).nextInt(3);
	    while(item == itemOnTable)
		item = (new Random()).nextInt(3);
	    System.out.println(getName() + " produces " + itemName(item));
	    items++;
	    itemOnTable = item;
	    return item;
	}
	
	public void run(){
	    while(true){
		int item = produce();
		producerConsumer.addToBuffer(item);
		item = produce();
		producerConsumer.addToBuffer(item);
		try{
		    sleep(300);
		}
		catch(InterruptedException ie){
		}
	    }
	}
    }

    public static class Drinker extends Thread{
	private Monitor producerConsumer;
	int startingItem = -1;
	boolean allow = false;
	public Drinker(int i, Monitor pc){
	    super("Drinker" + i);
	    producerConsumer = pc;
	    startingItem = i-1;  //make this random?
	    System.out.println("Drinker" + i + " starts with " + itemName(startingItem));
	}

	private void consume(int item){
	    System.out.println(getName() + " consumes " + itemName(item));
	}

	public boolean showItem(int myItem){
	    return producerConsumer.needsItems(myItem);
	}
	public void run(){
	    while(true){
		int item = producerConsumer.removeFromBuffer();
		consume(item);
		item = producerConsumer.removeFromBuffer();
		consume(item);
		try{
		    sleep(300);
		}
		catch(InterruptedException ie){
		}
	    }
	}
    }

    public static void main(String[] args){
	Monitor pc = new Monitor(2);
	for(int i = 1; i <= 3; i++)
	    (new Drinker(i,pc)).start();
	for(int i = 1; i <= 1; i++)
	    (new Server(i,pc)).start();
	Thread a[] = new Thread[Thread.activeCount()];
	Thread.enumerate(a);
	System.out.println(Arrays.toString(a));
    }
}
